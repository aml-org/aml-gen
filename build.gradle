buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name "mule-ci-releases"
            url "https://repository.mulesoft.org/nexus/content/repositories/ci-releases/"
        }
        maven {
            name "mule-ee-snapshots"
            url "https://repository-master.mulesoft.org/nexus/content/repositories/ci-snapshots/"
        }
        maven {
            name "mule-snapshots"
            url "http://repository.mulesoft.org/nexus/content/repositories/snapshots/"
        }
        maven {
            name "mule-ee-releases"
            url "https://repository.mulesoft.org/nexus/content/repositories/releases/"
        }
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'net.linguica.gradle:maven-settings-plugin:0.5'
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:scalariform-gradle-plugin:0.2.0"
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.22"
        classpath "gradle.plugin.org.scoverage:gradle-scoverage:2.1.0"
        classpath "com.mulesoft:gradle-tools:0.2.16"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "mule-ee-releases"
        credentials {
            username "${System.env.NEXUS_USR}"
            password "${System.env.NEXUS_PSW}"
        }

        url "https://repository.mulesoft.org/nexus/content/repositories/ci-releases/"
    }
    maven {
        name "mule-ee-snapshots"
        url "https://repository.mulesoft.org/nexus/content/repositories/ci-snapshots/"
    }
    maven {
        name "mule-releases"
        url "http://repository.mulesoft.org/nexus/content/repositories/releases/"
    }
    maven {
        name "mule-snapshots"
        url "http://repository.mulesoft.org/nexus/content/repositories/snapshots/"
    }
    maven { url "https://jitpack.io" }
}

apply plugin: 'scala'
apply plugin: 'distribution'
apply plugin: 'net.linguica.maven-settings'
apply plugin: 'com.github.hierynomus.scalariform'
apply plugin: 'com.github.maiflai.scalatest'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.scoverage'
apply plugin: 'com.mulesoft.gradle.sonar'
apply plugin: 'com.mulesoft.gradle.jvmService'

if(System.env.SONAR_USR != null) {
    sonar.url = "${System.env.SONAR_USR}"
    sonar.login = "${System.env.SONAR_PSW}"
    sonar.projectKey = "mulesoft.knowledge-graph-service"
    sonar.sources = "src/main/scala"
}

newRelic.enabled = true
description = "AML Document Generator"
mainClassName = ''
group = "com.mulesoft.ang-dg"
ospackage_application.prefix = "/usr/src/app"

def major = 0
def minor = 0
def patch = System.getenv("BUILD_NUMBER")

version = patch != null ? (major + "." + minor + "." + patch) : (major + "." + (minor+1) + ".0-SNAPSHOT")

ext {
    akkaCommonCore =  'com.mulesoft.akka.common:common-core:0.1.16'
    akkaCommonTest = 'com.mulesoft.akka.common:common-test:0.1.16'
    scalaTest = 'org.scalatest:scalatest_2.12:3.0.5'
    akkaActor = 'com.typesafe.akka:akka-actor_2.12:2.4.18'
}

dependencies {
    compile akkaCommonCore
    compile akkaActor

    testCompile scalaTest
    testCompile akkaCommonTest

    scoverage 'org.scoverage:scalac-scoverage-plugin_2.12:1.3.0', 'org.scoverage:scalac-scoverage-runtime_2.12:1.3.0'

    compile (group: 'com.github.amlorg', name: 'amf-validation_2.12', version: amfVersion)

    compile group: 'org.scalacheck', name: 'scalacheck_2.12', version: '1.14.0'
}

test {
    maxParallelForks = 1
    jvmArgs = ["-Dlogback.configurationFile=logback-quiet.xml"]
}

testScoverage {
    maxParallelForks = 1
    jvmArgs = ["-Dlogback.configurationFile=logback-quiet.xml"]
}

checkScoverage {
    minimumRate = 0.75
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-Ypatmat-exhaust-depth", "off"]
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-Ypatmat-exhaust-depth", "off"]
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

apply plugin: 'idea'

configurations {
    ideaPlugins
}

test {
    gradle.taskGraph.whenReady { graph ->
        enabled !graph.hasTask(':checkScoverage')
        workingDir(project.buildDir)
    }
}

testScoverage {
    workingDir(project.buildDir)
}

build.dependsOn(checkScoverage)

tasks.sonarqube.dependsOn(checkScoverage)
