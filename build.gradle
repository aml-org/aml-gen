buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven {
      name "mule-ci-releases"
      url "https://repository.mulesoft.org/nexus/content/repositories/ci-releases/"
    }
    maven {
      name "mule-ee-snapshots"
      url "https://repository-master.mulesoft.org/nexus/content/repositories/ci-snapshots/"
    }
    maven {
      name "mule-snapshots"
      url "http://repository.mulesoft.org/nexus/content/repositories/snapshots/"
    }
    maven {
      name "mule-ee-releases"
      url "https://repository.mulesoft.org/nexus/content/repositories/releases/"
    }
    maven { url "https://jitpack.io" }
  }
  dependencies {
    classpath 'net.linguica.gradle:maven-settings-plugin:0.5'
    classpath "gradle.plugin.com.hierynomus.gradle.plugins:scalariform-gradle-plugin:0.2.0"
    classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.22"
    classpath "gradle.plugin.org.scoverage:gradle-scoverage:2.1.0"
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
  maven {
    name "mule-ee-releases"
    credentials {
      username "${System.env.NEXUS_USR}"
      password "${System.env.NEXUS_PSW}"
    }

    url "https://repository.mulesoft.org/nexus/content/repositories/ci-releases/"
  }
  maven {
    name "mule-ee-snapshots"
    url "https://repository.mulesoft.org/nexus/content/repositories/ci-snapshots/"
  }
  maven {
    name "mule-releases"
    url "http://repository.mulesoft.org/nexus/content/repositories/releases/"
  }
  maven {
    name "mule-snapshots"
    url "http://repository.mulesoft.org/nexus/content/repositories/snapshots/"
  }
  maven { url "https://jitpack.io" }
}

apply plugin: 'scala'
apply plugin: 'net.linguica.maven-settings'
apply plugin: 'com.github.hierynomus.scalariform'
apply plugin: 'com.github.maiflai.scalatest'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.scoverage'
apply plugin: 'maven'
apply plugin: 'maven-publish'

description = "AML Document Generator"
mainClassName = 'aml.gen.GenDoc'
group = "com.github.amlorg"

ext {
  scalaTest = 'org.scalatest:scalatest_2.12:3.0.5'
  pegdown = 'org.pegdown:pegdown:1.6.0'
}

dependencies {

  // https://mvnrepository.com/artifact/wolfendale/scalacheck-gen-regexp
  compile group: 'wolfendale', name: 'scalacheck-gen-regexp_2.12', version: '0.1.1'
  compile group: 'com.github.amlorg', name: 'amf-validation_2.12', version: amfVersion
  compile group: 'org.scalacheck', name: 'scalacheck_2.12', version: '1.14.0'

  testCompile scalaTest
  testRuntime pegdown

  scoverage 'org.scoverage:scalac-scoverage-plugin_2.12:1.3.0', 'org.scoverage:scalac-scoverage-runtime_2.12:1.3.0'
}

test {
  maxParallelForks = 1
  jvmArgs = ["-Dlogback.configurationFile=logback-quiet.xml"]
}

testScoverage {
  maxParallelForks = 1
  jvmArgs = ["-Dlogback.configurationFile=logback-quiet.xml"]
}

checkScoverage {
  minimumRate = 0.75
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.additionalParameters = ["-Ypatmat-exhaust-depth", "off"]
}

configurations {
  ideaPlugins
}

test {
  gradle.taskGraph.whenReady { graph ->
    enabled !graph.hasTask(':checkScoverage')
    workingDir(project.rootDir)
  }
}

testScoverage {
  workingDir(project.rootDir)
}

build.dependsOn(checkScoverage)

// ------ Publishing -------
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = "${project.name}_${scalaVersion.split("\\.").dropRight(1).join(".")}"
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      credentials {
        username "${System.env.NEXUS_USR}"
        password "${System.env.NEXUS_PSW}"
      }
      def path = project.version.toString().endsWith("SNAPSHOT") ? "snapshots" : "releases"
      url "https://repository-master.mulesoft.org/nexus/content/repositories/${path}"
    }
  }
}